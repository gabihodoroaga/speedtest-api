// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mockSpeedtest

import (
	"github.com/gabihodoroaga/speedtest-api/pkg/api"
	"github.com/showwin/speedtest-go/speedtest"
	"sync"
)

// Ensure, that TestLibraryMock does implement api.TestLibrary.
// If this is not the case, regenerate this file with moq.
var _ api.TestLibrary = &TestLibraryMock{}

// TestLibraryMock is a mock implementation of api.TestLibrary.
//
//     func TestSomethingThatUsesTestLibrary(t *testing.T) {
//
//         // make and configure a mocked api.TestLibrary
//         mockedTestLibrary := &TestLibraryMock{
//             DownloadTestFunc: func(server *speedtest.Server, savingMode bool) error {
// 	               panic("mock out the DownloadTest method")
//             },
//             FetchServerListFunc: func(in1 *speedtest.User) (speedtest.ServerList, error) {
// 	               panic("mock out the FetchServerList method")
//             },
//             FetchUserInfoFunc: func() (*speedtest.User, error) {
// 	               panic("mock out the FetchUserInfo method")
//             },
//             FindServerFunc: func(servers *speedtest.ServerList, serverIDs []int) (speedtest.Servers, error) {
// 	               panic("mock out the FindServer method")
//             },
//             UploadTestFunc: func(server *speedtest.Server, savingMode bool) error {
// 	               panic("mock out the UploadTest method")
//             },
//         }
//
//         // use mockedTestLibrary in code that requires api.TestLibrary
//         // and then make assertions.
//
//     }
type TestLibraryMock struct {
	// DownloadTestFunc mocks the DownloadTest method.
	DownloadTestFunc func(server *speedtest.Server, savingMode bool) error

	// FetchServerListFunc mocks the FetchServerList method.
	FetchServerListFunc func(in1 *speedtest.User) (speedtest.ServerList, error)

	// FetchUserInfoFunc mocks the FetchUserInfo method.
	FetchUserInfoFunc func() (*speedtest.User, error)

	// FindServerFunc mocks the FindServer method.
	FindServerFunc func(servers *speedtest.ServerList, serverIDs []int) (speedtest.Servers, error)

	// UploadTestFunc mocks the UploadTest method.
	UploadTestFunc func(server *speedtest.Server, savingMode bool) error

	// calls tracks calls to the methods.
	calls struct {
		// DownloadTest holds details about calls to the DownloadTest method.
		DownloadTest []struct {
			// Server is the server argument value.
			Server *speedtest.Server
			// SavingMode is the savingMode argument value.
			SavingMode bool
		}
		// FetchServerList holds details about calls to the FetchServerList method.
		FetchServerList []struct {
			// In1 is the in1 argument value.
			In1 *speedtest.User
		}
		// FetchUserInfo holds details about calls to the FetchUserInfo method.
		FetchUserInfo []struct {
		}
		// FindServer holds details about calls to the FindServer method.
		FindServer []struct {
			// Servers is the servers argument value.
			Servers *speedtest.ServerList
			// ServerIDs is the serverIDs argument value.
			ServerIDs []int
		}
		// UploadTest holds details about calls to the UploadTest method.
		UploadTest []struct {
			// Server is the server argument value.
			Server *speedtest.Server
			// SavingMode is the savingMode argument value.
			SavingMode bool
		}
	}
	lockDownloadTest    sync.RWMutex
	lockFetchServerList sync.RWMutex
	lockFetchUserInfo   sync.RWMutex
	lockFindServer      sync.RWMutex
	lockUploadTest      sync.RWMutex
}

// DownloadTest calls DownloadTestFunc.
func (mock *TestLibraryMock) DownloadTest(server *speedtest.Server, savingMode bool) error {
	if mock.DownloadTestFunc == nil {
		panic("TestLibraryMock.DownloadTestFunc: method is nil but TestLibrary.DownloadTest was just called")
	}
	callInfo := struct {
		Server     *speedtest.Server
		SavingMode bool
	}{
		Server:     server,
		SavingMode: savingMode,
	}
	mock.lockDownloadTest.Lock()
	mock.calls.DownloadTest = append(mock.calls.DownloadTest, callInfo)
	mock.lockDownloadTest.Unlock()
	return mock.DownloadTestFunc(server, savingMode)
}

// DownloadTestCalls gets all the calls that were made to DownloadTest.
// Check the length with:
//     len(mockedTestLibrary.DownloadTestCalls())
func (mock *TestLibraryMock) DownloadTestCalls() []struct {
	Server     *speedtest.Server
	SavingMode bool
} {
	var calls []struct {
		Server     *speedtest.Server
		SavingMode bool
	}
	mock.lockDownloadTest.RLock()
	calls = mock.calls.DownloadTest
	mock.lockDownloadTest.RUnlock()
	return calls
}

// FetchServerList calls FetchServerListFunc.
func (mock *TestLibraryMock) FetchServerList(in1 *speedtest.User) (speedtest.ServerList, error) {
	if mock.FetchServerListFunc == nil {
		panic("TestLibraryMock.FetchServerListFunc: method is nil but TestLibrary.FetchServerList was just called")
	}
	callInfo := struct {
		In1 *speedtest.User
	}{
		In1: in1,
	}
	mock.lockFetchServerList.Lock()
	mock.calls.FetchServerList = append(mock.calls.FetchServerList, callInfo)
	mock.lockFetchServerList.Unlock()
	return mock.FetchServerListFunc(in1)
}

// FetchServerListCalls gets all the calls that were made to FetchServerList.
// Check the length with:
//     len(mockedTestLibrary.FetchServerListCalls())
func (mock *TestLibraryMock) FetchServerListCalls() []struct {
	In1 *speedtest.User
} {
	var calls []struct {
		In1 *speedtest.User
	}
	mock.lockFetchServerList.RLock()
	calls = mock.calls.FetchServerList
	mock.lockFetchServerList.RUnlock()
	return calls
}

// FetchUserInfo calls FetchUserInfoFunc.
func (mock *TestLibraryMock) FetchUserInfo() (*speedtest.User, error) {
	if mock.FetchUserInfoFunc == nil {
		panic("TestLibraryMock.FetchUserInfoFunc: method is nil but TestLibrary.FetchUserInfo was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFetchUserInfo.Lock()
	mock.calls.FetchUserInfo = append(mock.calls.FetchUserInfo, callInfo)
	mock.lockFetchUserInfo.Unlock()
	return mock.FetchUserInfoFunc()
}

// FetchUserInfoCalls gets all the calls that were made to FetchUserInfo.
// Check the length with:
//     len(mockedTestLibrary.FetchUserInfoCalls())
func (mock *TestLibraryMock) FetchUserInfoCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockFetchUserInfo.RLock()
	calls = mock.calls.FetchUserInfo
	mock.lockFetchUserInfo.RUnlock()
	return calls
}

// FindServer calls FindServerFunc.
func (mock *TestLibraryMock) FindServer(servers *speedtest.ServerList, serverIDs []int) (speedtest.Servers, error) {
	if mock.FindServerFunc == nil {
		panic("TestLibraryMock.FindServerFunc: method is nil but TestLibrary.FindServer was just called")
	}
	callInfo := struct {
		Servers   *speedtest.ServerList
		ServerIDs []int
	}{
		Servers:   servers,
		ServerIDs: serverIDs,
	}
	mock.lockFindServer.Lock()
	mock.calls.FindServer = append(mock.calls.FindServer, callInfo)
	mock.lockFindServer.Unlock()
	return mock.FindServerFunc(servers, serverIDs)
}

// FindServerCalls gets all the calls that were made to FindServer.
// Check the length with:
//     len(mockedTestLibrary.FindServerCalls())
func (mock *TestLibraryMock) FindServerCalls() []struct {
	Servers   *speedtest.ServerList
	ServerIDs []int
} {
	var calls []struct {
		Servers   *speedtest.ServerList
		ServerIDs []int
	}
	mock.lockFindServer.RLock()
	calls = mock.calls.FindServer
	mock.lockFindServer.RUnlock()
	return calls
}

// UploadTest calls UploadTestFunc.
func (mock *TestLibraryMock) UploadTest(server *speedtest.Server, savingMode bool) error {
	if mock.UploadTestFunc == nil {
		panic("TestLibraryMock.UploadTestFunc: method is nil but TestLibrary.UploadTest was just called")
	}
	callInfo := struct {
		Server     *speedtest.Server
		SavingMode bool
	}{
		Server:     server,
		SavingMode: savingMode,
	}
	mock.lockUploadTest.Lock()
	mock.calls.UploadTest = append(mock.calls.UploadTest, callInfo)
	mock.lockUploadTest.Unlock()
	return mock.UploadTestFunc(server, savingMode)
}

// UploadTestCalls gets all the calls that were made to UploadTest.
// Check the length with:
//     len(mockedTestLibrary.UploadTestCalls())
func (mock *TestLibraryMock) UploadTestCalls() []struct {
	Server     *speedtest.Server
	SavingMode bool
} {
	var calls []struct {
		Server     *speedtest.Server
		SavingMode bool
	}
	mock.lockUploadTest.RLock()
	calls = mock.calls.UploadTest
	mock.lockUploadTest.RUnlock()
	return calls
}
